variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:

- job: 'LinuxOrMac'
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-16.04'
      mac:
        imageName: 'macos-10.13'
  pool:
    vmImage: $(imageName)
  steps:
  - task: NuGetToolInstaller@0
  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
  - script: 'msbuild /r /t:Build /p:Configuration=$(buildConfiguration);vsVersion=latest;platform=$(buildPlatform);logProjectEvents=true'
    displayName: 'Build'
  # FIXME: Does it have to build again?
  - script: "msbuild /r /t:'Build,XunitTest' /p:'Configuration=$(buildConfiguration);vsVersion=latest;platform=$(buildPlatform);logProjectEvents=true' Libplanet.Tests"
    displayName: 'Test'
  - task: CopyFiles@2
    displayName: 'Copy artifacts'
    inputs:
      contents: |
        $(Build.Repository.LocalPath)/Libplanet/bin/**/*.dll
        $(Build.Repository.LocalPath)/CHANGES.md
        $(Build.Repository.LocalPath)/README.md
        $(Build.Repository.LocalPath)/LICENSE
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Build.BuildId)_$(Build.BuildNumber)_$(imageName)

- job: 'Windows'
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: NuGetToolInstaller@0
  - task: DotNetCoreCLI@2
    displayName: 'Restore'
    inputs:
      command: 'restore'
  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: $(solution)
      vsVersion: latest
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
      logProjectEvents: true
  - task: VSTest@2
    displayName: 'Test'
    inputs:
      vsVersion: latest
      platform: $(buildPlatform)
      configuration: $(buildConfiguration)
  - task: PowerShell@2
    displayName: 'Build docs'
    inputs:
      targetType: filePath
      filePath: Docs/build.ps1
      failOnStderr: false
      workingDirectory: Docs/
  - task: CopyFiles@2
    displayName: 'Copy artifacts'
    inputs:
      contents: |
        $(Build.Repository.LocalPath)\Libplanet\bin\**\?(*.exe|*.dll)
        $(Build.Repository.LocalPath)\CHANGES.md
        $(Build.Repository.LocalPath)\README.md
        $(Build.Repository.LocalPath)\LICENSE
        $(Build.Repository.LocalPath)\Docs\_site\**
      targetFolder: $(Build.ArtifactStagingDirectory)
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: $(Build.BuildId)_$(Build.BuildNumber)
  - task: PowerShell@2
    displayName: 'Publish docs to GitHub Pages'
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
    inputs:
      targetType: inline
      failOnStderr: false
      script: |
        Set-PSDebug -Trace 1

        if ("${env:GITHUB_TOKEN}" -eq "") {
          Write-Error @'
        The environment variable GITHUB_TOKEN is not defined.
        You can create an access token from GitHub's settings:
          https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/
        You can define secret variables from Azure Pipelines' settings.
          https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts&tabs=yaml%2Cbatch#secret-variables
        '@
          exit 1
        }

        $repoUrl = $env:BUILD_REPOSITORY_URI -replace `
          "^https://","https://${env:GITHUB_TOKEN}@"
        $buildPath = "${env:BUILD_REPOSITORY_LOCALPATH}/Docs/_site"
        $commit = "${env:BUILD_SOURCEVERSION}"
        $dirName = if ($env:BUILD_REASON -eq "PullRequest") {
          "pulls/${env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER}"
        } else {
          $env:BUILD_SOURCEBRANCHNAME
        };

        $authorName = $(git show -s --format='%ce' "$commit")
        $authorEmail = $(git show -s --format='%ce' "$commit")

        $tmpGitdir = New-TemporaryFile
        rm "$tmpGitDir"
        git clone -b gh-pages --single-branch "$repoUrl" "$tmpGitDir"

        cd "$tmpGitDir"
        git config user.name "$authorName"
        git config user.email "$authorEmail"

        if (Test-Path "$dirName") {
          git rm -rf "$dirName"
        }

        if (-not (Test-Path pulls)) {
          mkdir pulls
        }

        Copy-Item -Path $buildPath -Recurse -Destination $dirName
        git add "$dirName"

        git commit --allow-empty -m "Triggered by $commit"
        git push origin gh-pages
